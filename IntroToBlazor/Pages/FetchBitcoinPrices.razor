@page "/bitcoin-price"
@inject HttpClient Http

<PageTitle>Bitcoin Price</PageTitle>

<h1>Bitcoin Price</h1>

<p>This component demonstrates fetching Bitcoin price data from the CoinDesk API.</p>

@if (bitcoinPrice == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Last Updated: @bitcoinPrice?.Time?.Updated</p>
    <p>Bitcoin Price (USD): @bitcoinPrice?.Bpi?.USD?.Rate</p>
    <p>Bitcoin Price (GBP): @bitcoinPrice?.Bpi?.GBP?.Rate</p>
    <p>Bitcoin Price (EUR): @bitcoinPrice?.Bpi?.EUR?.Rate</p>
}

@code {
    private BitcoinPriceResponse? bitcoinPrice;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            bitcoinPrice = await Http.GetFromJsonAsync<BitcoinPriceResponse>("https://api.coindesk.com/v1/bpi/currentprice.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public class BitcoinPriceResponse
    {
        public BitcoinTime? Time { get; set; }
        public string? Disclaimer { get; set; }
        public string? ChartName { get; set; }
        public BitcoinPriceIndex? Bpi { get; set; }
    }

    public class BitcoinTime
    {
        public string? Updated { get; set; }
        public string? UpdatedISO { get; set; }
        public string? Updateduk { get; set; }
    }

    public class BitcoinPriceIndex
    {
        public BitcoinCurrency? USD { get; set; }
        public BitcoinCurrency? GBP { get; set; }
        public BitcoinCurrency? EUR { get; set; }
    }

    public class BitcoinCurrency
    {
        public string? Code { get; set; }
        public string? Symbol { get; set; }
        public string? Rate { get; set; }
        public string? Description { get; set; }
        public decimal? RateFloat { get; set; }
    }
}
